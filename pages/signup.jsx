import { Form, message, notification, Result, Steps } from "antd";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { DefaultButton } from "../components/customButton/defaultButton";
import { WebNavigation } from "../components/navigation/nav";
import { StyledSteps } from "../styles/styled";
import { supaClient } from "../lib/supabase";
import { ComplexDetails, StudentDetails } from "../components/forms/forms";
import { useStepsForm } from "sunflower-antd";
import Countries from "countries-api";

function SignUp() {
  const [submitted, setSubmitted] = useState(false);

  const [countries, setCountries] = useState();

  useEffect(() => {
    setCountries(Countries.findByRegion("Africa"));
  }, []);

  console.log(countries);

  const { Step } = Steps;

  const { form, current, gotoStep, submit } = useStepsForm({
    async submit(values) {
      const {
        avatar,
        fname,
        mname,
        lname,
        email,
        password,
        dob,
        classes,
        arm,
        nationality,
        placeofbirth,
        religion,
        gender,
      } = values;
      console.log(
        avatar,
        fname,
        mname,
        lname,
        email,
        password,
        dob,
        classes,
        arm,
        nationality,
        placeofbirth,
        religion,
        gender
      );
      try {
        const res = await supaClient.auth.signUp({
          email: email,
          password: password,
          options: {
            data: {
              avatarUrl: avatar,
              firstname: fname,
              lastname: lname,
              dob: dob,
              class: classes,
              arm: arm,
              nationality: nationality,
              placeofbirth: placeofbirth,
              religion: religion,
              gender: gender,
            },
          },
        });
        console.log(res);
      } catch (error) {
        console.log(error);
      }
      await new Promise((r) => setTimeout(r, 1000));
      return "ok";
    },
  });

  const next = () => {
    gotoStep(current + 1);
  };
  const prev = () => {
    gotoStep(current - 1);
  };

  const forms = [<StudentDetails />, <ComplexDetails country={countries} />];

  const router = useRouter();

  const onFinishFailed = (errorInfo) => {
    console.log(errorInfo);
  };

  return (
    <>
      <div>
        <Head>
          <title>DNED / NNSS Payments | SignUp</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </div>
      <div className="h-full flex min-h-screen items-center justify-center flex-col w-full">
        <WebNavigation viewHeaderonAuth={true} />
        <div className="h-full w-full flex items-center mt-12 justify-center">
          <div
            className="w-full max-w-lg py-10 px-6 md:p-6 h-full bg-white shadow-md flex 
          items-center justify-center flex-col"
          >
            <div className="w-full max-w-md">
              <StyledSteps current={current} size="small">
                <Step
                  key="step1"
                  title={
                    <p className="text-primary font-medium font-inter tracking-[0.065em]">
                      Step 1
                    </p>
                  }
                />
                <Step
                  key="step2"
                  title={
                    <p className="text-primary font-medium font-inter tracking-[0.065em]">
                      Step 2
                    </p>
                  }
                />
              </StyledSteps>
              <Form
                form={form}
                onFinishFailed={onFinishFailed}
                layout="vertical"
              >
                <div>
                  <div className="my-4 bg-white">{forms[current]}</div>
                  <div className="w-full flex justify-between">
                    {current > 0 && (
                      <DefaultButton
                        className={
                          submitted
                            ? `hidden`
                            : `py-1.5 px-3 rounded-md bg-primary text-white font-medium
                             font-montserrat tracking-[0.065em]`
                        }
                        onClick={() => prev()}
                      >
                        Previous
                      </DefaultButton>
                    )}
                    {current < forms.length - 1 && (
                      <DefaultButton
                        className="py-1.5 px-3 rounded-md border-[1px] border-primary text-primary
             hover:bg-secondary font-medium font-montserrat tracking-[0.065em]"
                        onClick={() => next()}
                      >
                        Next
                      </DefaultButton>
                    )}
                    {current === forms.length - 1 && (
                      <DefaultButton
                        className="py-1.5 px-3 rounded-md bg-secondary text-primary font-medium
             font-montserrat tracking-[0.065em]"
                        onClick={() => {
                          submit().then((result) => {
                            if (result === "ok") {
                              setSubmitted(true);
                              gotoStep(current + 1);
                            }
                          });
                        }}
                      >
                        Done
                      </DefaultButton>
                    )}
                    {current === 2 && (
                      <div className="flex items-center justify-center w-full">
                        <Result
                          status="success"
                          title="Submit is succeed!"
                          extra={
                            <>
                              <DefaultButton
                                className="py-1.5 px-3 rounded-md bg-secondary text-primary font-medium
                              font-montserrat tracking-[0.065em]"
                                onClick={() => {
                                  form.resetFields();
                                  setSubmitted(false);
                                  gotoStep(0);
                                }}
                              >
                                Check your email
                              </DefaultButton>
                            </>
                          }
                        />
                      </div>
                    )}
                  </div>
                </div>
              </Form>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default SignUp;
